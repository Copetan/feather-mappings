// color = pink:
// Any task you would "invoke" from externally
//
// color = lightblue:
// Any task that is used internally
//
// shape = rect:
// Any "download" task
//
// subgraph {}
// Any task for some given topic

digraph G {
    node [style=filled];
    color = blue;

    // COMMENT OUT

    insertMappings[color = pink];
    patchNests -> insertMappings;

    propagateMappingsDown[color = pink];
    patchNests -> propagateMappingsDown;

    propagateMappingsUp[color = pink];
    patchNests -> propagateMappingsUp;

    propagateMappings[color = pink];
    patchNests -> propagateMappings;

    feather[color = pink];
    nestJar, separateMappings -> feather;

    importMappingsOfficial[color = pink];
    invertCalamus -> importMappingsOfficial;

    patchCalamus[color = pink];
    mergeJars, downloadCalamus -> patchCalamus;

    exportMappingsOfficial[color = pink];
    downloadCalamus -> exportMappingsOfficial;

    decompileCFR[color = pink];
    mapNamedJar -> decompileCFR;

    decompileQuiltFlower[color = pink];
    mapNamedJar -> decompileQuiltFlower;

    decompileProcyon[color = pink];
    mapNamedJar -> decompileProcyon;

    nestJar[color = pink];
    mapCalamusJar -> nestJar;
    patchNests -> nestJar;

    downloadNests[color = lightblue, shape = rect];

    patchNests[color = lightblue];
    downloadNests, downloadCalamus -> patchNests;

    separateMappings[color = lightblue];
    patchNests -> separateMappings;

    checkMappings[color = lightblue];
    mapCalamusJar, separateMappingsForBuild -> checkMappings;

    buildTinyWithEnum[color = lightblue];
    mergeTiny -> buildTinyWithEnum;

    subgraph cluster_decompile {
        label = "decompile";
        color = blue;

        decompileProcyon, decompileCFR, decompileQuiltFlower;
    }

    subgraph cluster_operations {
        color = blue;

        propagateMappings, propagateMappingsUp, propagateMappingsDown,
        insertMappings, feather, nestJar, importMappingsOfficial,
        exportMappingsOfficial, patchCalamus;
    }
    //*/

    buildFeatherTiny -> v2UnmergedFeatherJar;

    downloadVersionsManifest[color = lightblue, shape = rect];

    v2UnmergedFeatherJar[color = lightblue];

    v2MergedFeatherJar[color = lightblue];
    mergeV2 -> v2MergedFeatherJar;

    mergeV2[color = lightblue];
    v2UnmergedFeatherJar, invertCalamusV2 -> mergeV2;

    invertCalamusV2[color = lightblue];
    downloadCalamusV2 -> invertCalamusV2;

    downloadCalamusV2[color = lightblue, shape = rect];
    downloadMcJars -> downloadCalamusV2;

    mergeJars[color = lightblue];
    downloadMcJars -> mergeJars;

    downloadVersionDetails[color = lightblue, shape = rect];
    downloadVersionsManifest -> downloadVersionDetails;

    downloadMcJars[color = lightblue, shape = rect];
    downloadVersionDetails -> downloadMcJars;

    downloadCalamus[color = lightblue, shape = rect];
    downloadMcJars -> downloadCalamus;

    downloadWantedVersionManifest[color = lightblue, shape = rect];
    downloadVersionsManifest -> downloadWantedVersionManifest;

    downloadMcLibs[color = lightblue, shape = rect];
    downloadWantedVersionManifest -> downloadMcLibs;

    mapCalamusJar[color = lightblue];
    downloadMcLibs, downloadCalamus, mergeJars -> mapCalamusJar;

    buildFeatherTiny[color = lightblue];
    mapCalamusJar, separateMappingsForBuild -> buildFeatherTiny;

    // COMMENT OUT

    invertCalamus[color = lightblue];
    downloadCalamus -> invertCalamus;

    mergeTiny[color = lightblue];
    buildFeatherTiny, invertCalamus -> mergeTiny;

    tinyJar[color = lightblue];
    mergeTiny -> tinyJar;

    compressTiny[color = lightblue];
    tinyJar, mergeTiny -> compressTiny;

    compressTiny, tinyJar -> build;
    //*/

    separateMappingsForBuild[color = lightblue];

    build[color = pink];
    v2UnmergedFeatherJar, v2MergedFeatherJar -> build;

    // COMMENT OUT

    subgraph cluster_javadocs {
        label = "javadocs"
        color = blue;

        mapNamedJar, genFakeSource, javadoc, javadocJar;
    }

    mapNamedJar[color = lightblue];
    mergeV2, mapCalamusJar -> mapNamedJar;

    genFakeSource[color = lightblue];
    mergeV2, mapNamedJar -> genFakeSource;

    javadoc[color = lightblue];
    genFakeSource, downloadMcLibs -> javadoc;

    javadocJar[color = lightblue];
    javadoc -> javadocJar;

    javadocJar -> publish;
    //*/

    publish[color = pink];
    build -> publish;
}