import com.google.common.hash.Hashing
import com.google.common.io.Files
import com.google.common.net.UrlEscapers
import com.strobel.assembler.metadata.JarTypeLoader
import com.strobel.decompiler.Decompiler
import com.strobel.decompiler.DecompilerSettings
import com.strobel.decompiler.PlainTextOutput
import cuchaz.enigma.command.CheckMappingsCommand
import cuchaz.enigma.command.ComposeMappingsCommand
import cuchaz.enigma.command.ConvertMappingsCommand
import cuchaz.enigma.command.MapSpecializedMethodsCommand
import groovy.io.FileType
import groovy.json.JsonSlurper
import groovy.xml.XmlSlurper
import net.fabricmc.stitch.commands.CommandMergeTiny
import net.fabricmc.stitch.commands.CommandProposeFieldNames
import net.fabricmc.stitch.commands.CommandReorderTiny
import net.fabricmc.stitch.commands.CommandRewriteCalamus
import net.fabricmc.stitch.commands.tinyv2.CommandMergeTinyV2
import net.fabricmc.stitch.commands.tinyv2.CommandProposeV2FieldNames
import net.fabricmc.stitch.commands.tinyv2.CommandReorderTinyV2
import net.fabricmc.stitch.merge.JarMerger
import net.fabricmc.tinyremapper.OutputConsumerPath
import net.fabricmc.tinyremapper.TinyRemapper
import net.fabricmc.tinyremapper.TinyUtils
import net.ornithemc.nester.Nester
import net.ornithemc.mappingutils.MappingUtils;
import net.ornithemc.mappingutils.PropagationDirection;
import net.ornithemc.mappingutils.io.Format;
import net.ornithemc.mappingutils.io.Mappings;
import net.ornithemc.mappingutils.io.Mappings.ClassMapping;
import net.ornithemc.mappingutils.io.Mappings.FieldMapping;
import net.ornithemc.mappingutils.io.Mappings.MethodMapping;
import net.ornithemc.mappingutils.io.Mappings.ParameterMapping;
import net.ornithemc.mappingutils.io.MappingTarget;
import net.ornithemc.mappingutils.io.MappingValidator;
import net.ornithemc.mappingutils.io.diff.DiffSide;
import net.ornithemc.mappingutils.io.diff.MappingsDiff;
import net.ornithemc.mappingutils.io.diff.MappingsDiff.ClassDiff;
import net.ornithemc.mappingutils.io.diff.MappingsDiff.Diff;
import net.ornithemc.mappingutils.io.diff.MappingsDiff.FieldDiff;
import net.ornithemc.mappingutils.io.diff.MappingsDiff.MethodDiff;
import net.ornithemc.mappingutils.io.diff.MappingsDiff.ParameterDiff;
import net.ornithemc.mappingutils.io.diff.MappingsDiffValidator;
import net.ornithemc.mappingutils.io.diff.tree.MappingsDiffTree;
import org.apache.commons.io.FileUtils

import java.nio.charset.Charset
import java.nio.charset.StandardCharsets
import java.nio.file.Paths
import java.util.jar.JarFile
import java.util.zip.GZIPOutputStream
import java.util.zip.ZipEntry
import java.util.zip.ZipInputStream

buildscript {
	repositories {
		maven {
			name "Ornithe"
			url "https://maven.ornithemc.net/releases"
		}
		maven {
			name 'Quilt Repository'
			url 'https://maven.quiltmc.org/repository/release/'
		}
		maven {
			name 'Quilt Snapshot Repository'
			url 'https://maven.quiltmc.org/repository/snapshot/'
		}
		maven {
			name "Fabric Repository"
			url 'https://maven.fabricmc.net'
		}
		mavenCentral()
	}
	dependencies {
		classpath "net.ornithemc:enigma-cli:${project.enigma_version}"
		classpath "net.ornithemc:stitch:${project.stitch_version}"
		classpath "net.ornithemc:tiny-remapper:0.8.4"
		classpath "net.ornithemc:nester:0.2.5"
		classpath "net.ornithemc:mapping-utils:0.1.1"
		classpath "commons-io:commons-io:2.8.0"
		classpath 'de.undercouch:gradle-download-task:4.1.1'
		classpath "net.ornithemc:name-proposal:${project.name_proposal_version}"
		classpath "net.fabricmc.unpick:unpick:${project.unpick_version}"
		classpath "net.fabricmc.unpick:unpick-format-utils:${project.unpick_version}"
		classpath "org.codehaus.groovy:groovy-json:3.0.9"
		classpath "org.codehaus.groovy:groovy-xml:3.0.9"
	}
}

plugins {
	id 'de.undercouch.download' version '4.1.1'
	id 'base'
	id 'maven-publish'
	id 'java' // for jd gen
	id 'org.cadixdev.licenser' version '0.6.1'
	id 'net.fabricmc.filament' version '0.3.0'
}

def ENV = System.getenv()
def minecraft_version = ENV.MC_VERSION
def build_number = nextBuildNumber(ENV, minecraft_version)
def featherVersion = "${minecraft_version}+build.${build_number}"

static def nextBuildNumber(ENV, minecraft_version) {
	if (ENV.MAVEN_URL) {
		def build_number = 0

		try {
			def xml = new URL("https://maven.ornithemc.net/releases/net/ornithemc/feather/maven-metadata.xml").text
			def metadata = new XmlSlurper().parseText(xml)

			def version_build = "${minecraft_version}+build."
			def i = version_build.length()

			metadata.versioning.versions.version.each {
				def version = it.text()

				if (version.startsWith(version_build)) {
					def number_text = version.substring(i)
					try {
						def number = Integer.parseInt(number_text)

						if (number > build_number) {
							build_number = number
						}
					} catch (NumberFormatException ignored) {

					}
				}
			}
		} catch (FileNotFoundException e) {

		}

		return build_number + 1
	} else {
		return "local"
	}
}

repositories {
	mavenCentral()
	maven {
		name "Ornithe"
		url "https://maven.ornithemc.net/releases"
	}
	maven {
		name "Mojang"
		url 'https://libraries.minecraft.net/'
	}
	maven {
		name 'Quilt Repository'
		url 'https://maven.quiltmc.org/repository/release/'
	}
	maven {
		name 'Quilt Snapshot Repository'
		url 'https://maven.quiltmc.org/repository/snapshot/'
	}
	maven {
		name "Fabric Repository"
		url 'https://maven.fabricmc.net'
	}
	maven {
		name "Procyon Repository"
		url 'https://oss.sonatype.org'
	}
}

configurations {
	enigmaRuntime
	javadocClasspath
	decompileClasspath
	mappingPoetJar {
		transitive = false
	}
	mappingPoet {
		extendsFrom mappingPoetJar
		transitive = true
	}
}

dependencies {
	enigmaRuntime "net.ornithemc:enigma-swing:${project.enigma_version}"
	enigmaRuntime "net.ornithemc:name-proposal:${project.name_proposal_version}"
	javadocClasspath "net.ornithemc:ornithe-loader:${project.ornithe_loader_version}"
	javadocClasspath "com.google.code.findbugs:jsr305:3.0.2"
	decompileClasspath "net.fabricmc:cfr:${project.cfr_version}"
	decompileClasspath "org.quiltmc:quiltflower:${project.quiltflower_version}"
	implementation "net.fabricmc:procyon-fabric-compilertools:${project.procyon_version}"
	mappingPoetJar "net.fabricmc:mappingpoet:${project.mapping_poet_version}"
}

configurations.all {
	resolutionStrategy {
		dependencySubstitution {
			substitute module('org.lwjgl.lwjgl:lwjgl_util:2.9.1-nightly-20131017') with module('org.lwjgl.lwjgl:lwjgl_util:2.9.0')
			substitute module('org.lwjgl.lwjgl:lwjgl:2.9.1-nightly-20131017') with module('org.lwjgl.lwjgl:lwjgl:2.9.0')
		}
	}
}

def setupGroup = "jar setup"
def featherGroup = "feather"
def buildMappingGroup = "mapping build"
def mapJarGroup = "jar mapping"
def mappingsDir = file("mappings/")
def workingDir = file("run/")
def separatedMappings = new File(workingDir, "${minecraft_version}.tiny")
def workingMappings = new File(workingDir, "${minecraft_version}-changed.tiny")
def cacheFilesMinecraft = file(".gradle/minecraft")
def tempDir = file(".gradle/temp")
def mergedFile = file("${minecraft_version}-merged.jar")
def nestedJar = file("${minecraft_version}-mn.jar")
def calamusJar = file("${minecraft_version}-calamus.jar")
def namedJar = file("${minecraft_version}-named.jar")
def versionFile = new File(cacheFilesMinecraft, "${minecraft_version}.json")
def clientJar = new File(cacheFilesMinecraft, "${minecraft_version}-client.jar")
def serverJar = new File(cacheFilesMinecraft, "${minecraft_version}-server.jar")
def libraries = new File(cacheFilesMinecraft, "libraries")
def libs = new File("build/libs/")

static boolean validateChecksum(File file, String checksum) {
	if (file != null) {
		//noinspection GrDeprecatedAPIUsage
		def hash = Files.asByteSource(file).hash(Hashing.sha1())
		def builder = new StringBuilder()
		hash.asBytes().each {
			builder.append(Integer.toString((it & 0xFF) + 0x100, 16).substring(1))
		}
		return builder.toString() == checksum
	}
	return false
}

task downloadVersionsManifest {
	group = setupGroup
	//inputs.property "mc_ver", minecraft_version
	inputs.property "currenttime", new Date()
	def manifestFile = new File(cacheFilesMinecraft, "version_manifest_v2.json")
	outputs.file(manifestFile)
	doLast {
		logger.lifecycle(":downloading minecraft versions manifest")
		FileUtils.copyURLToFile(new URL("https://launchermeta.mojang.com/mc/game/version_manifest_v2.json"), manifestFile)
	}
}

static def getManifestVersion(File manifestFile, String minecraft_version) {
	def manifest = manifestFile.exists() ? new JsonSlurper().parseText(FileUtils.readFileToString(manifestFile, Charset.defaultCharset())) : null
	return manifest != null ? manifest.versions.stream().filter({
		(it.id == minecraft_version)
	}).findFirst() : java.util.Optional.empty()
}

task downloadWantedVersionManifest(dependsOn: downloadVersionsManifest) {
	group = setupGroup
	def manifestFile = downloadVersionsManifest.outputs.files.singleFile
	def manifestVersion = getManifestVersion(manifestFile, minecraft_version)

	//have to grab the release time as there's a current timestamp on each element?!
	inputs.property "releaseTime", manifestVersion.isPresent() ? manifestVersion.get().releaseTime : -1

	outputs.file versionFile

	doLast {
		manifestVersion = getManifestVersion(manifestFile, minecraft_version)
		//nb need to re-read here in case it didn't exist before
		if (manifestVersion.isPresent() || versionFile.exists()) {

			if (manifestVersion.isPresent()) {
				FileUtils.copyURLToFile(new URL(manifestVersion.get().url), versionFile)
			}
		} else {
			throw new RuntimeException("No version data for Minecraft version ${minecraft_version} (Did you forget to set the MC_VERSION environment variable?)")
		}
	}

}

task downloadMcJars(dependsOn: downloadWantedVersionManifest) {
	group = setupGroup
	inputs.files versionFile

	outputs.files(clientJar, serverJar)

	outputs.upToDateWhen {
		def version = new JsonSlurper().parseText(FileUtils.readFileToString(versionFile, Charset.defaultCharset()))
		return clientJar.exists() && serverJar.exists() && validateChecksum(clientJar, version.downloads.client.sha1) && validateChecksum(serverJar, version.downloads.server.sha1)
	}

	doLast {
		if (!versionFile.exists()) {
			throw new RuntimeException("Can't download the jars without the ${versionFile.name} file!")
		}

		//reload in case it changed
		def version = new JsonSlurper().parseText(FileUtils.readFileToString(versionFile, Charset.defaultCharset()))

		logger.lifecycle(":downloading minecraft jars")

		download {
			src new URL(version.downloads.client.url)
			dest clientJar
			overwrite false
		}

		download {
			src new URL(version.downloads.server.url)
			dest serverJar
			overwrite false
		}
	}
}

task downloadCalamus(dependsOn: downloadMcJars, type: Download) {
	group = buildMappingGroup
	def url = "https://github.com/OrnitheMC/calamus/raw/main/mappings/${minecraft_version}.tiny"
	src UrlEscapers.urlFragmentEscaper().escape(url)
	dest new File(cacheFilesMinecraft, "${minecraft_version}-calamus.tiny")
}

task downloadCalamusV2(dependsOn: downloadMcJars, type: Download) {
	group = buildMappingGroup
	def url = "https://maven.ornithemc.net/releases/net/ornithemc/calamus/${minecraft_version}/calamus-${minecraft_version}-v2.jar"
	src UrlEscapers.urlFragmentEscaper().escape(url)
	dest new File(cacheFilesMinecraft, "${minecraft_version}-calamus-v2.jar")

	def output = new File(cacheFilesMinecraft, "${minecraft_version}-calamus-v2.tiny")
	def nests = new File(cacheFilesMinecraft, "${minecraft_version}.nest")
	outputs.files(output, nests)


	doLast {
		copy {
			from({ zipTree(downloadCalamusV2.dest) }) {
				from 'mappings/mappings.tiny'
				rename 'mappings.tiny', "../${output.name}"
			}

			into output.parentFile
		}
		copy {
			from({ zipTree(downloadCalamusV2.dest) }) {
				from 'mappings/mappings.nest'
				rename 'mappings.nest', "../${nests.name}"
			}

			into nests.parentFile
		}
	}
}

task mergeJars(dependsOn: downloadMcJars) {
	group = setupGroup
	inputs.files downloadMcJars.outputs.files.files
	outputs.file(mergedFile)

	doLast {
		logger.lifecycle(":merging jars")
		def client = inputs.files.files.find { it.name.endsWith("-client.jar") }
		def server = inputs.files.files.find { it.name.endsWith("-server.jar") }
		def merged = mergedFile

		if (merged.exists()) {
			return
		}

		def jarMerger = new JarMerger(client, server, merged)
		jarMerger.merge()
		jarMerger.close()
	}

}

task nestJar(dependsOn: [mergeJars, downloadCalamusV2]) {
	group = setupGroup
	inputs.file mergedFile
	outputs.file(nestedJar)

	doLast {
		logger.lifecycle(":nesting jar")

		if (nestedJar.exists()) {
			return
		}

		File nests = downloadCalamusV2.outputs.files.files.find { it.name.endsWith(".nest") }

		if (nests.exists()) {
			Nester.fixJar(Paths.get(mergedFile.getAbsolutePath()), Paths.get(nestedJar.getAbsolutePath()), Paths.get(nests.getAbsolutePath()))
		}
	}

}


task downloadMcLibs(dependsOn: downloadWantedVersionManifest) {
	group = setupGroup
	inputs.files versionFile

	outputs.dir(libraries)

	outputs.upToDateWhen { false }

	doLast {
		if (!versionFile.exists()) {
			throw new RuntimeException("Can't download the jars without the ${versionFile.name} file!")
		}

		def version = new JsonSlurper().parseText(FileUtils.readFileToString(versionFile, StandardCharsets.UTF_8))

		logger.lifecycle(":downloading minecraft libraries")

		if (!libraries.exists()) {
			libraries.mkdirs()
		}

		version.libraries.each {
			def artifact = it.downloads.artifact
			if (artifact == null) return
			def downloadUrl = artifact.url

			download {
				src downloadUrl
				dest new File(libraries, downloadUrl.substring(downloadUrl.lastIndexOf("/") + 1))
				overwrite false
			}

			project.dependencies.add("decompileClasspath", it.name)
		}
	}
}

task invertCalamus(dependsOn: downloadCalamus, type: FileOutput) {
	group = buildMappingGroup
	def v1Input = downloadCalamus.dest

	output = new File(cacheFilesMinecraft, "${minecraft_version}-calamus-inverted.tiny")
	outputs.file(output)

	outputs.upToDateWhen { false }

	doLast {
		logger.lifecycle(":building inverted calamus")

		String[] v1Args = [
				v1Input.getAbsolutePath(),
				output.getAbsolutePath(),
				"calamus", "official"
		]

		new CommandReorderTiny().run(v1Args)
	}
}

task invertCalamusV2(dependsOn: downloadCalamusV2, type: FileOutput) {
	group = buildMappingGroup
	def v2Input = new File(cacheFilesMinecraft, "${minecraft_version}-calamus-v2.tiny")

	output = new File(cacheFilesMinecraft, "${minecraft_version}-calamus-inverted-v2.tiny")
	outputs.file(output)

	outputs.upToDateWhen { false }

	doLast {
		logger.lifecycle(":building inverted calamus v2")

		String[] v2Args = [
				v2Input.getAbsolutePath(),
				output.getAbsolutePath(),
				"calamus", "official"
		]

		new CommandReorderTinyV2().run(v2Args)
	}
}

task patchCalamus(dependsOn: [nestJar, downloadCalamus]) {
	group = buildMappingGroup
	def calamusTinyInput = downloadCalamus.dest

	def outputFile = new File(cacheFilesMinecraft, "${minecraft_version}-calamus-full.tiny")
	outputs.file(outputFile)

	outputs.upToDateWhen { false }

	doLast {
		logger.lifecycle(":patching calamus")

		File jarFile = nestedJar.exists() ? nestedJar : mergedFile
		String[] args = [
				jarFile.getAbsolutePath(),
				calamusTinyInput.getAbsolutePath(),
				outputFile.getAbsolutePath(),
				"--writeAll"
		]

		new CommandRewriteCalamus().run(args)
	}
}

task mapCalamusJar(dependsOn: [downloadMcLibs, downloadCalamus, nestJar]) {
	group = mapJarGroup
	inputs.files downloadMcLibs.outputs.files.files
	outputs.file(calamusJar)

	//Force the task to always run
	outputs.upToDateWhen { false }

	doLast {
		logger.lifecycle(":mapping minecraft to calamus")

		File jarFile = nestedJar.exists() ? nestedJar : mergedFile
		def tinyInput = downloadCalamus.dest

		mapJar(calamusJar, jarFile, tinyInput, libraries, "official", "calamus")
	}
}


task separateMappings() {
	group = featherGroup
	inputs.dir mappingsDir
	outputs.files(separatedMappings, workingMappings)

	//Force the task to always run
	outputs.upToDateWhen { false }

	doLast {
		logger.lifecycle(":separating mappings for " + minecraft_version)

		MappingsDiffTree tree = MappingsDiffTree.of(Format.TINY_V2, mappingsDir.toPath())
		Mappings mappings = MappingUtils.separateMappings(tree, minecraft_version);

		Format.TINY_V2.writeMappings(separatedMappings.toPath(), mappings)
		mappings.setValidator(new MappingValidator() {
			// remove dummy mappings

			@Override
			public boolean validate(ClassMapping c) {
				return MappingsDiff.safeIsDiff(c.src(), c.getComplete()) || !c.getJavadoc().isEmpty() || c.hasChildren();
			}

			@Override
			public boolean validate(FieldMapping f) {
				return MappingsDiff.safeIsDiff(f.src(), f.get()) || !f.getJavadoc().isEmpty();
			}

			@Override
			public boolean validate(MethodMapping m) {
				return MappingsDiff.safeIsDiff(m.src(), m.get()) || (!m.get().startsWith("m_") && !m.get().equals("<init>") && !m.get().equals("<clinit>")) || !m.getJavadoc().isEmpty() || m.hasChildren();
			}

			@Override
			public boolean validate(ParameterMapping p) {
				if (p.get().startsWith("p_")) {
					p.set(p.src());
					return !p.getJavadoc().isEmpty();
				}

				return true;
			}
		})
		Format.TINY_V2.writeMappings(workingMappings.toPath(), mappings)
	}
}

static def insertMappings(minecraft_version, mappingsDir, separatedMappingsPath, workingMappingsPath, dir) {
	Mappings separatedMappings = Format.TINY_V2.readMappings(separatedMappingsPath);
	Mappings workingMappings = Format.TINY_V2.readMappings(workingMappingsPath);

	MappingsDiff changes = MappingUtils.diffMappings(Format.TINY_V2, separatedMappings, workingMappings);
	changes.setValidator(new MappingsDiffValidator() {
		// re-insert dummy mappings

		@Override
		public boolean validate(ClassDiff c) {
			return check(c);
		}

		@Override
		public boolean validate(FieldDiff f) {
			return check(f);
		}

		@Override
		public boolean validate(MethodDiff m) {
			return check(m);
		}

		@Override
		public boolean validate(ParameterDiff p) {
			return check(p);
		}

		private boolean check(Diff<?> d) {
			if (d.isDiff()) {
				if (d.get(DiffSide.A).isEmpty()) {
					// new mappings should be ignored, as any un-mapped members
					// should already be present as dummy mappings
					System.out.println("ignoring illegal change " + d);
					return false;
				}
				if (d.get(DiffSide.B).isEmpty()) {
					// removing a mapping is changed into a dummy mapping
					if (d.target() == MappingTarget.CLASS) {
						d.set(DiffSide.B, ClassMapping.getSimplified(d.src()));
					} else if (d.target() == MappingTarget.PARAMETER) {
						d.set(DiffSide.B, "p_" + ((ParameterDiff)d).getIndex());
					} else {
						d.set(DiffSide.B, d.src());
					}
				}
			}

			return true;
		}
	});

	MappingsDiffTree tree = MappingsDiffTree.of(Format.TINY_V2, mappingsDir);
	MappingUtils.insertMappings(dir, tree, changes, minecraft_version);

	java.nio.file.Files.delete(separatedMappingsPath)
	java.nio.file.Files.delete(workingMappingsPath)
}

task insertMappings() {
	group = featherGroup
	doLast {
		logger.lifecycle(":saving mappings for " + minecraft_version)

		insertMappings(minecraft_version, mappingsDir.toPath(), separatedMappings.toPath(), workingMappings.toPath(), PropagationDirection.NONE)
	}
}

task propagateMappingsDown() {
	group = featherGroup
	doLast {
		logger.lifecycle(":saving mappings for " + minecraft_version)

		insertMappings(minecraft_version, mappingsDir.toPath(), separatedMappings.toPath(), workingMappings.toPath(), PropagationDirection.DOWN)
	}
}

task propagateMappingsUp() {
	group = featherGroup
	doLast {
		logger.lifecycle(":saving mappings for " + minecraft_version)

		insertMappings(minecraft_version, mappingsDir.toPath(), separatedMappings.toPath(), workingMappings.toPath(), PropagationDirection.UP)
	}
}

task propagateMappings() {
	group = featherGroup
	doLast {
		logger.lifecycle(":saving mappings for " + minecraft_version)

		insertMappings(minecraft_version, mappingsDir.toPath(), separatedMappings.toPath(), workingMappings.toPath(), PropagationDirection.BOTH)
	}
}

task feather(dependsOn: [mapCalamusJar, separateMappings]) {
	group = featherGroup
	doLast {
		ant.setLifecycleLogLevel "WARN"
		ant.java(
				classname: 'cuchaz.enigma.gui.Main',
				classpath: configurations.enigmaRuntime.asPath,
				fork: true,
				spawn: true
		) {
			jvmarg(value: "-Xmx2048m")
			arg(value: '-jar')
			arg(value: calamusJar.getAbsolutePath())
			arg(value: '-mappings')
			arg(value: workingMappings.getAbsolutePath())
			arg(value: '-profile')
			arg(value: 'enigma_profile.json')
		}
	}
}

task separateMappingsForBuild(type: WithV2FileOutput) {
	inputs.dir mappingsDir

	v1Output = new File(tempDir, "separated-mappings.tiny")
	v2Output = new File(tempDir, "separated-mappings-v2.tiny")

	outputs.upToDateWhen { false }

	doLast {
		MappingUtils.separateMappings(Format.TINY_V2, mappingsDir.toPath(), v2Output.toPath(), minecraft_version)

		new ConvertMappingsCommand().run(
			"tinyv2",
			v2Output.getAbsolutePath(),
			"tiny:calamus:named",
			v1Output.getAbsolutePath())
	}
}

task checkMappings(dependsOn: [mapCalamusJar, separateMappingsForBuild]) {
	group = buildMappingGroup
	inputs.file separateMappingsForBuild.v2Output
	doLast {
		logger.lifecycle(":checking mappings")

		File jarFile = nestedJar.exists() ? nestedJar : mergedFile
		String[] args = [
				jarFile.getAbsolutePath(),
				separateMappingsForBuild.v2Output.getAbsolutePath()
		]

		try {
			new CheckMappingsCommand().run(args)
		} catch (IllegalStateException ignored) {
			// just print, don't fail the task
		}
	}
}

task buildFeatherTiny(dependsOn: [mapCalamusJar, separateMappingsForBuild], type: WithV2FileOutput) {
	group = buildMappingGroup
	inputs.file separateMappingsForBuild.v2Output
	if (!libs.exists()) {
		libs.mkdirs()
	}

	v1Output = new File(tempDir, "feather-mappings.tiny")
	v2Output = new File(tempDir, "feather-mappings-v2.tiny")

	outputs.upToDateWhen { false }

	doLast {
		logger.lifecycle(":generating tiny mappings")

		new MapSpecializedMethodsCommand().run(
				calamusJar.getAbsolutePath(),
				"tinyv2",
				separateMappingsForBuild.v2Output.getAbsolutePath(),
				"tinyv2:calamus:named",
				v2Output.getAbsolutePath()
		)

		new ConvertMappingsCommand().run(
				"tinyv2",
				v2Output.getAbsolutePath(),
				"tiny:calamus:named",
				v1Output.getAbsolutePath())
	}
}

task mergeTiny(dependsOn: ["buildFeatherTiny", "invertCalamus"], type: FileOutput) {
	group = buildMappingGroup
	def featherTinyInput = buildFeatherTiny.v1Output
	def calamusTinyInput = invertCalamus.output

	def unorderedResultMappings = new File(tempDir, "mappings-unordered.tiny")
	output = new File(tempDir, "mappings.tiny")
	outputs.file(output)

	outputs.upToDateWhen { false }

	doLast {
		logger.lifecycle(":merging feather and calamus")
		String[] args = [
				calamusTinyInput.getAbsolutePath(),
				featherTinyInput.getAbsolutePath(),
				unorderedResultMappings.getAbsolutePath(),
				"calamus",
				"official"
		]

		new CommandMergeTiny().run(args)

		logger.lifecycle(":reordering merged calamus")
		String[] args2 = [
				unorderedResultMappings.getAbsolutePath(),
				output.getAbsolutePath(),
				"official", "calamus", "named"
		]

		new CommandReorderTiny().run(args2)
	}
}

task tinyJar(type: Jar, dependsOn: mergeTiny) {
	group = buildMappingGroup
	outputs.upToDateWhen { false }
	archiveFileName = "feather-${featherVersion}.jar"
	destinationDirectory.set(file("build/libs"))
	archiveClassifier.set("")
	from(mergeTiny.output) {
		rename { "mappings/mappings.tiny" }
	}
}

task compressTiny(dependsOn: [tinyJar, mergeTiny], type: FileOutput) {
	group = buildMappingGroup
	def outputFile = new File(libs, "feather-tiny-${featherVersion}.gz")
	outputs.file(outputFile)
	output = outputFile

	def inputFile = mergeTiny.output

	outputs.upToDateWhen { false }

	doLast {
		logger.lifecycle(":compressing tiny mappings")

		def buffer = new byte[1024]
		def fileOutputStream = new FileOutputStream(outputFile)
		def outputStream = new GZIPOutputStream(fileOutputStream)
		def fileInputStream = new FileInputStream(inputFile)

		def length
		while ((length = fileInputStream.read(buffer)) > 0) {
			outputStream.write(buffer, 0, length)
		}

		fileInputStream.close()
		outputStream.finish()
		outputStream.close()
	}
}

clean.doFirst {
	delete tempDir, cacheFilesMinecraft
}

tasks.build.dependsOn "compressTiny", "tinyJar", "v2UnmergedFeatherJar", "v2MergedFeatherJar"

task exportMappingsOfficial(dependsOn: downloadCalamus) {
	def composeInput = downloadCalamus.dest

	doLast {
		logger.lifecycle(":exporting mappings")
		String[] args = [
				"tiny",
				composeInput.getAbsolutePath(),
				"enigma",
				file("mappings/").getAbsolutePath(),
				"enigma",
				file("mappings_official/").getAbsolutePath(),
				"right"
		]

		new ComposeMappingsCommand().run(args)
	}
}

task importMappingsOfficial(dependsOn: invertCalamus) {
	def composeInput = invertCalamus.output

	doLast {
		logger.lifecycle(":importing mappings")
		String[] args = [
				"tiny",
				composeInput.getAbsolutePath(),
				"enigma",
				file("mappings_official/").getAbsolutePath(),
				"enigma",
				file("mappings/").getAbsolutePath(),
				"right"
		]

		new ComposeMappingsCommand().run(args)
	}
}

task buildTinyWithEnum(dependsOn: "mergeTiny", type: FileOutput) {
	group = buildMappingGroup
	def noEnum = mergeTiny.output
	output = new File(tempDir, "named-with-enum.tiny")

	outputs.file(output)
	outputs.upToDateWhen { false }

	doLast {
		logger.lifecycle(":seeking auto-mappable fields")

		File jarFile = nestedJar.exists() ? nestedJar : mergedFile
		String[] argsPropose = [
				jarFile.getAbsolutePath(), // must use official jar
				noEnum.getAbsolutePath(),
				output.getAbsolutePath()
		]

		new CommandProposeFieldNames().run(argsPropose)
	}
}

task mapNamedJar(dependsOn: ["mergeV2", mapCalamusJar]) {
	group = mapJarGroup
	inputs.files downloadMcLibs.outputs.files.files
	outputs.file(namedJar)

	//Force the task to always run
	outputs.upToDateWhen { false }

	doLast {
		logger.lifecycle(":mapping minecraft to named")

		mapJar(namedJar, calamusJar, mergeV2.output, libraries, "calamus", "named")
	}
}

task insertAutoGeneratedEnumMappings(dependsOn: [buildFeatherTiny, mapCalamusJar], type: FileOutput) {
	group = buildMappingGroup
	def noEnumV2 = buildFeatherTiny.v2Output
	output = new File(tempDir, "unmerged-named-v2-with-enum.tiny")

	outputs.upToDateWhen { false }

	doLast {
		logger.lifecycle(":seeking auto-mappable fields for unmerged mappings")

		String[] argsProposeV2 = [
				calamusJar.getAbsolutePath(), // must use calamus jar
				noEnumV2.getAbsolutePath(),
				output.getAbsolutePath(),
				"false" // don't replace existing names right now
		]

		new CommandProposeV2FieldNames().run(argsProposeV2)
	}
}

task mergeV2(dependsOn: ["v2UnmergedFeatherJar", "invertCalamusV2"], type: FileOutput) {
	def mergedV2 = new File(tempDir, "merged-v2.tiny")

	output = new File(tempDir, "merged-reordered-v2.tiny")
	outputs.upToDateWhen { false }

	doLast {
		logger.lifecycle(":merging feather and calamus v2")
		String[] args = [
				invertCalamusV2.output.getAbsolutePath(),
				insertAutoGeneratedEnumMappings.output.getAbsolutePath(),
				mergedV2.getAbsolutePath(),
				"calamus",
				"official"
		]

		new CommandMergeTinyV2().run(args)

		//Reorder the mappings to match the output of loom
		args = [
				mergedV2.getAbsolutePath(),
				output.getAbsolutePath(),
				"official",
				"calamus",
				"named"
		]
		new CommandReorderTinyV2().run(args)
	}
}

task v2UnmergedFeatherJar(dependsOn: insertAutoGeneratedEnumMappings, type: Jar) {
	def mappings = insertAutoGeneratedEnumMappings.output
	group = "mapping build"
	outputs.upToDateWhen { false }
	archiveFileName = "feather-${featherVersion}-v2.jar"

	from(file(mappings)) {
		rename mappings.name, "mappings/mappings.tiny"
	}
	destinationDirectory.set(file("build/libs"))
}

task v2MergedFeatherJar(dependsOn: ["mergeV2"], type: Jar) {
	def mappings = mergeV2.output
	group = "mapping build"
	outputs.upToDateWhen { false }
	archiveFileName = "feather-${featherVersion}-mergedv2.jar"

	from(file(mappings)) {
		rename mappings.name, "mappings/mappings.tiny"
	}
	destinationDirectory.set(file("build/libs"))
}

def fakeSourceDir = file(".gradle/temp/fakeSource")
task genFakeSource(type: JavaExec, dependsOn: ["mergeV2", "mapNamedJar"]) {
	group = "javadoc generation"
	outputs.upToDateWhen { false }

	if (!JavaVersion.current().isCompatibleWith(JavaVersion.VERSION_17)) {
		javaLauncher.set(javaToolchains.launcherFor {
			languageVersion = JavaLanguageVersion.of(17)
		})
	}

	main "net.fabricmc.mappingpoet.Main"
	classpath configurations.mappingPoet
	// use merged v2 so we have all namespaces in jd
	args mergeV2.output.getAbsolutePath(), namedJar.getAbsolutePath(), fakeSourceDir.getAbsolutePath(), libraries.getAbsolutePath()

	doLast {
		logger.lifecycle ":Fake source generated"
	}
}

task decompileCFR(type: JavaExec, dependsOn: "mapNamedJar") {
	classpath = configurations.decompileClasspath
	mainClass.set("org.benf.cfr.reader.Main")

	args namedJar.getAbsolutePath(), "--outputdir", file("namedSrc").absolutePath

	doFirst {
		file("namedSrc").deleteDir()
	}
}

task decompileQuiltFlower(type: JavaExec, dependsOn: "mapNamedJar") {
	classpath = configurations.decompileClasspath
	mainClass.set("org.jetbrains.java.decompiler.main.decompiler.ConsoleDecompiler")

	args namedJar.getAbsolutePath(), file("namedSrc").absolutePath

	doFirst {
		file("namedSrc").deleteDir()
	}
}

static List<String> getFilesInJar(String jarPath) {
	List<String> classNames = new ArrayList<String>()
	ZipInputStream zip = new ZipInputStream(new FileInputStream(jarPath))
	for (ZipEntry entry = zip.getNextEntry(); entry != null; entry = zip.getNextEntry()) {
		if (!entry.isDirectory() && entry.getName().endsWith(".class")) {
			String className = entry.getName()
			classNames.add(className.substring(0, className.length() - ".class".length()))
		}
	}
	return classNames
}


static def decompileUsingProcyon(String jarPath, String outputDir) {
	DecompilerSettings settings = DecompilerSettings.javaDefaults()
	JarFile jar = new JarFile(jarPath)
	settings.setTypeLoader(new JarTypeLoader(jar))

	List<String> classNames = getFilesInJar(jarPath)
	for (String name : classNames) {
		String dirPath = (outputDir + File.separator + name.substring(0, name.lastIndexOf('/'))).replace('/', File.separator)
		String filePath = (dirPath + name.substring(name.lastIndexOf('/')) + ".java").replace('/', File.separator)
		File dir = new File(dirPath)
		dir.mkdirs()
		println "Mapping: " + name
		try (final FileOutputStream stream = new FileOutputStream(filePath)
			 final OutputStreamWriter writer = new OutputStreamWriter(stream)) {

			Decompiler.decompile(
					name,
					new PlainTextOutput(writer),
					settings
			)
			writer.close()
		}
		catch (final IOException e) {
			println e
		}
	}

}


task decompileProcyon(dependsOn: "mapNamedJar") {
	doFirst {
		file("namedSrc").deleteDir()
		File directory = new File(file("namedSrc").absolutePath)
		directory.mkdirs()
	}

	doLast {
		logger.lifecycle("decompile class")
		decompileUsingProcyon(namedJar.getAbsolutePath(), file("namedSrc").absolutePath)
	}
}

javadoc {
	dependsOn genFakeSource
	dependsOn downloadMcLibs
	group = "javadoc generation"
	outputs.upToDateWhen { false }

	def mappingPoetJar = project.provider { zipTree configurations.mappingPoetJar.singleFile }

	failOnError = false
	maxMemory = '2G'

	if (!JavaVersion.current().isCompatibleWith(JavaVersion.VERSION_17)) {
		javadocTool.set(javaToolchains.javadocToolFor {
			languageVersion = JavaLanguageVersion.of(17)
		})
	}
	// verbose = true // enable to debug
	options {
		// verbose() // enable to debug
		source = "11"
		encoding = 'UTF-8'
		charSet = 'UTF-8'
		memberLevel = JavadocMemberLevel.PRIVATE
		splitIndex true
		tags(
				'apiNote:a:API Note:',
				'implSpec:a:Implementation Requirements:',
				'implNote:a:Implementation Note:'
		)
		taglets "net.fabricmc.mappingpoet.jd.MappingTaglet"
		// taglet path, header, extra stylesheet settings deferred

		addBooleanOption "-allow-script-in-comments", true
		links(
				'https://guava.dev/releases/21.0/api/docs/',
				'https://www.javadoc.io/doc/com.google.code.gson/gson/2.8.0/',
				'https://logging.apache.org/log4j/2.x/log4j-api/apidocs/',
				// jsr305 need to come before jdk or the anno links are broken
				'https://www.javadoc.io/doc/com.google.code.findbugs/jsr305/3.0.2/',
				'https://javadoc.lwjgl.org/',
				'https://fastutil.di.unimi.it/docs/',
				'https://netty.io/4.1/api/',
				'https://commons.apache.org/proper/commons-logging/javadocs/api-1.1.3/',
				'https://commons.apache.org/proper/commons-lang/javadocs/api-3.5',
				'https://commons.apache.org/proper/commons-io/javadocs/api-2.5',
				'https://commons.apache.org/proper/commons-codec/archives/1.10/apidocs',
				'https://commons.apache.org/proper/commons-compress/javadocs/api-1.8.1/',
				"https://maven.ornithemc.net/javadocs/releases/net/ornithemc/ornithe-loader-${project.ornithe_loader_version}/",
				"https://docs.oracle.com/en/java/javase/11/docs/api/"
				// Need to add loader jd publication for env annotations!
		)
		// https://docs.oracle.com/en/java/javase/17/docs/specs/man/javadoc.html#additional-options-provided-by-the-standard-doclet
		addBooleanOption 'Xdoclint:html', true
		addBooleanOption 'Xdoclint:syntax', true
		addBooleanOption 'Xdoclint:reference', true
		addBooleanOption 'Xdoclint:accessibility', true
	}
	source fakeSourceDir
	classpath = configurations.javadocClasspath.plus downloadMcLibs.outputs.files.asFileTree

	doLast {
		project.copy {
			from mappingPoetJar
			include "copy_on_click.js"
			into javadoc.outputDirectory
		}
	}

	doFirst {
		// lazy setting
		options {
			tagletPath configurations.mappingPoet.files.toList()
			header mappingPoetJar.get().filter { it.name == 'javadoc_header.txt' }.singleFile.text.trim()
			// cannot include line breaks
			addFileOption "-add-stylesheet", mappingPoetJar.get().filter { it.name == 'forms.css' }.singleFile
		}
	}
}

task javadocJar(type: Jar, dependsOn: ["javadoc"]) {
	group = "javadoc generation"

	from javadoc.destinationDir

	archiveVersion.set featherVersion
	archiveClassifier.set('javadoc')
}

publishing {
	publications {
		maven(MavenPublication) {
			groupId 'net.ornithemc'
			artifactId "feather"
			version featherVersion

			artifact(compressTiny.output) {
				classifier "tiny"
				builtBy compressTiny
			}
			artifact(tinyJar)
			artifact(v2UnmergedFeatherJar) {
				classifier "v2"
			}
			artifact(v2MergedFeatherJar) {
				classifier "mergedv2"
			}
			artifact javadocJar
		}

	}
	repositories {
		if (ENV.MAVEN_URL) {
			maven {
				url ENV.MAVEN_URL
				credentials {
					username ENV.MAVEN_USERNAME
					password ENV.MAVEN_PASSWORD
				}
				authentication {
					basic(BasicAuthentication)
				}
			}
		}
	}
}


static void mapJar(File output, File input, File mappings, File libraries, String from, String to,
				   Action<TinyRemapper.Builder> action = {}) {
	if (output.exists()) {
		output.delete()
	}

	def remapperBuilder = TinyRemapper.newRemapper()
			.withMappings(TinyUtils.createTinyMappingProvider(mappings.toPath(), from, to))
			.renameInvalidLocals(true)
			.rebuildSourceFilenames(true)
	action.execute(remapperBuilder)
	def remapper = remapperBuilder
			.build()

	try {
		def outputConsumerBuilder = new OutputConsumerPath.Builder(output.toPath())
		def outputConsumer = outputConsumerBuilder.build()
		outputConsumer.addNonClassFiles(input.toPath())
		remapper.readInputs(input.toPath())

		libraries.eachFileRecurse(FileType.FILES) { file ->
			remapper.readClassPath(file.toPath())
		}
		remapper.apply(outputConsumer)
		outputConsumer.close()
		remapper.finish()
	} catch (Exception e) {
		remapper.finish()
		throw new RuntimeException("Failed to remap jar", e)
	}
}

abstract class FileOutput extends DefaultTask {
	@OutputFile
	File output
}

abstract class FileOutputInput extends DefaultTask {
	@InputFile
	File input

	@OutputFile
	File output
}

abstract class WithV2FileOutput extends DefaultTask {
	@OutputFile
	File v1Output
	@OutputFile
	File v2Output
}
